[{"/Users/kos/projects/messenger/src/index.tsx":"1","/Users/kos/projects/messenger/src/reportWebVitals.ts":"2","/Users/kos/projects/messenger/src/App.tsx":"3","/Users/kos/projects/messenger/src/theme.ts":"4","/Users/kos/projects/messenger/src/components/Layout.tsx":"5","/Users/kos/projects/messenger/src/components/ThemeToggle.tsx":"6","/Users/kos/projects/messenger/src/components/Header.tsx":"7","/Users/kos/projects/messenger/src/components/Avatar.tsx":"8","/Users/kos/projects/messenger/src/components/IconButton.tsx":"9","/Users/kos/projects/messenger/src/components/ChatList.tsx":"10","/Users/kos/projects/messenger/src/components/Chat.tsx":"11","/Users/kos/projects/messenger/src/hooks/useGlobalContext.ts":"12","/Users/kos/projects/messenger/src/components/MessageList.tsx":"13","/Users/kos/projects/messenger/src/components/Message.tsx":"14","/Users/kos/projects/messenger/src/apolloClient.ts":"15","/Users/kos/projects/messenger/src/components/Footer.tsx":"16","/Users/kos/projects/messenger/src/graphql/mutations.ts":"17","/Users/kos/projects/messenger/src/graphql/queries.ts":"18","/Users/kos/projects/messenger/src/graphql/subscriptions.ts":"19","/Users/kos/projects/messenger/src/graphql/fragments.ts":"20","/Users/kos/projects/messenger/src/hooks/useHookWithRefCallback.ts":"21"},{"size":478,"mtime":1607602983091,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1607599161242,"results":"24","hashOfConfig":"23"},{"size":2279,"mtime":1610144386708,"results":"25","hashOfConfig":"23"},{"size":841,"mtime":1608130407089,"results":"26","hashOfConfig":"23"},{"size":1976,"mtime":1609256839589,"results":"27","hashOfConfig":"23"},{"size":693,"mtime":1607688660759,"results":"28","hashOfConfig":"23"},{"size":1832,"mtime":1608741949492,"results":"29","hashOfConfig":"23"},{"size":298,"mtime":1607686334654,"results":"30","hashOfConfig":"23"},{"size":790,"mtime":1608747563230,"results":"31","hashOfConfig":"23"},{"size":1007,"mtime":1609252669432,"results":"32","hashOfConfig":"23"},{"size":1992,"mtime":1609257238548,"results":"33","hashOfConfig":"23"},{"size":169,"mtime":1607699206005,"results":"34","hashOfConfig":"23"},{"size":2335,"mtime":1610144093166,"results":"35","hashOfConfig":"23"},{"size":2022,"mtime":1609255765535,"results":"36","hashOfConfig":"23"},{"size":1123,"mtime":1608031425267,"results":"37","hashOfConfig":"23"},{"size":3953,"mtime":1609253507583,"results":"38","hashOfConfig":"23"},{"size":329,"mtime":1609253041773,"results":"39","hashOfConfig":"23"},{"size":534,"mtime":1609257728888,"results":"40","hashOfConfig":"23"},{"size":308,"mtime":1609253044146,"results":"41","hashOfConfig":"23"},{"size":203,"mtime":1609253046447,"results":"42","hashOfConfig":"23"},{"size":571,"mtime":1609790684847,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"2x40z3",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},"/Users/kos/projects/messenger/src/index.tsx",[],["91","92"],"/Users/kos/projects/messenger/src/reportWebVitals.ts",[],"/Users/kos/projects/messenger/src/App.tsx",[],"/Users/kos/projects/messenger/src/theme.ts",[],"/Users/kos/projects/messenger/src/components/Layout.tsx",[],"/Users/kos/projects/messenger/src/components/ThemeToggle.tsx",[],"/Users/kos/projects/messenger/src/components/Header.tsx",[],"/Users/kos/projects/messenger/src/components/Avatar.tsx",[],"/Users/kos/projects/messenger/src/components/IconButton.tsx",[],"/Users/kos/projects/messenger/src/components/ChatList.tsx",["93"],"import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport styled from 'styled-components';\nimport Chat from './Chat';\nimport useGlobalContext from '../hooks/useGlobalContext';\nimport { Chat as TChat } from '../types/Chat';\nimport { GET_CHATS } from 'graphql/queries';\n\nconst ChatList = () => {\n  const { activeChat, setActiveChat } = useGlobalContext();\n  const { loading, error, data } = useQuery<{ chats: TChat[] }>(GET_CHATS);\n\n  useEffect(() => {\n    if (!activeChat && data && data.chats) setActiveChat(data.chats[0]);\n  }, [data]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error || !data || !data.chats) return <p>Error :(</p>;\n\n  return (\n    <Wrapper>\n      {data.chats.map(chat => (\n        <Chat\n          chat={chat}\n          active={activeChat && activeChat.id === chat.id}\n          key={chat.id}\n          onClick={setActiveChat}\n        />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default ChatList;\n\nconst Wrapper = styled.div`\n  padding: 1rem 0;\n`;\n","/Users/kos/projects/messenger/src/components/Chat.tsx",[],"/Users/kos/projects/messenger/src/hooks/useGlobalContext.ts",[],"/Users/kos/projects/messenger/src/components/MessageList.tsx",[],"/Users/kos/projects/messenger/src/components/Message.tsx",[],"/Users/kos/projects/messenger/src/apolloClient.ts",[],"/Users/kos/projects/messenger/src/components/Footer.tsx",["94","95"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Picker, BaseEmoji } from 'emoji-mart';\nimport uEmojiParser from 'universal-emoji-parser';\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable';\nimport styled from 'styled-components';\nimport { FaRegSmile } from 'react-icons/fa';\nimport { FiPaperclip } from 'react-icons/fi';\nimport { useMutation } from '@apollo/client';\nimport useGlobalContext from '../hooks/useGlobalContext';\nimport IconButton from './IconButton';\nimport { INSERT_MESSAGE } from '../graphql/mutations';\nimport 'emoji-mart/css/emoji-mart.css';\n\nconst Footer = () => {\n  const { currentUser, activeChat, theme } = useGlobalContext();\n  const [message, setMessage] = useState('');\n  const [isPickerVisible, setIsPickerVisible] = useState(false);\n  const [sendMessage, { data, loading }] = useMutation(INSERT_MESSAGE);\n  const pickerRef = useRef<HTMLDivElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const onKeyDown = async (e: React.KeyboardEvent<HTMLDivElement>) => {\n    const content = inputRef.current?.innerHTML;\n\n    if (e.key !== 'Enter' || !content) return;\n\n    e.preventDefault();\n\n    await sendMessage({\n      variables: {\n        chatId: activeChat.id,\n        userId: currentUser.id,\n        type: 'text',\n        content,\n      },\n    });\n\n    setMessage('');\n  };\n\n  const onChange = (e: ContentEditableEvent) => {\n    setMessage(e.target.value);\n  };\n\n  const togglePicker = () => setIsPickerVisible(!isPickerVisible);\n\n  const onSelectEmoji = (data: BaseEmoji) => {\n    setMessage(message + uEmojiParser.parse(data.colons));\n    setIsPickerVisible(false);\n    inputRef.current?.focus();\n  };\n\n  useEffect(() => {\n    const handler = (e: MouseEvent) => {\n      if (\n        !pickerRef.current?.contains(e.target as Node) &&\n        !buttonRef.current?.contains(e.target as Node)\n      ) {\n        setIsPickerVisible(false);\n      }\n    };\n    document.addEventListener('click', handler);\n\n    return () => document.removeEventListener('click', handler);\n  }, []);\n\n  return (\n    <Wrapper>\n      <IconButton>\n        <FiPaperclip size=\"1.2rem\" />\n      </IconButton>\n      <MessageForm>\n        <InputWrapper>\n          <ContentEditable\n            innerRef={inputRef}\n            html={message}\n            disabled={false}\n            onChange={onChange}\n            onKeyDown={onKeyDown}\n          />\n        </InputWrapper>\n      </MessageForm>\n      <IconButton onClick={togglePicker} ref={buttonRef}>\n        <FaRegSmile size=\"1.2rem\" />\n      </IconButton>\n      {isPickerVisible && (\n        <PickerWrapper ref={pickerRef}>\n          <Picker\n            theme={theme}\n            title=\"\"\n            emoji=\"\"\n            onSelect={onSelectEmoji}\n            set=\"twitter\"\n          />\n        </PickerWrapper>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Footer;\n\nconst Wrapper = styled.footer`\n  display: flex;\n  align-items: center;\n  height: 5rem;\n  margin-left: 2rem;\n  padding-right: 2rem;\n  border-top: 1px solid ${({ theme }) => theme.borderColor};\n`;\n\nconst MessageForm = styled.div`\n  display: flex;\n  flex: 1;\n  margin: 0 1rem;\n`;\n\nconst InputWrapper = styled.div`\n  flex: 1;\n  border: none;\n  border-radius: 0.5rem;\n  background-color: ${({ theme }) => theme.messageInputBackgroundColor};\n  outline: none;\n  color: ${({ theme }) => theme.fontColor};\n  font-size: 16px;\n\n  & > div {\n    padding: 0.9rem 1rem;\n\n    :focus {\n      outline: none;\n    }\n  }\n\n  img {\n    width: 1.2rem;\n    vertical-align: bottom;\n  }\n`;\n\nconst PickerWrapper = styled.div`\n  & > .emoji-mart {\n    position: absolute;\n    bottom: 4rem;\n    right: 1rem;\n  }\n\n  & .emoji-mart-anchor-selected {\n    .emoji-mart-anchor-icon {\n      color: ${({ theme }) => theme.blueColor} !important;\n    }\n    .emoji-mart-anchor-bar {\n      background-color: ${({ theme }) => theme.blueColor} !important;\n    }\n  }\n`;\n","/Users/kos/projects/messenger/src/graphql/mutations.ts",[],"/Users/kos/projects/messenger/src/graphql/queries.ts",[],"/Users/kos/projects/messenger/src/graphql/subscriptions.ts",[],"/Users/kos/projects/messenger/src/graphql/fragments.ts",[],["96","97"],"/Users/kos/projects/messenger/src/hooks/useHookWithRefCallback.ts",["98","99"],"import { useRef, useCallback } from 'react';\n\nexport default (handler: () => void) => {\n  const ref = useRef<Element>();\n\n  const scrollToBottom = () => {\n    if (ref && ref.current) {\n      ref.current.scrollTop = ref.current.scrollHeight;\n    }\n  };\n\n  const setRef = useCallback((node: Element | null) => {\n    if (ref && ref.current) {\n      ref.current.removeEventListener('scroll', handler);\n    }\n\n    if (node) {\n      node.addEventListener('scroll', handler);\n    }\n\n    ref.current = node || undefined;\n  }, []);\n\n  return [setRef, scrollToBottom] as const;\n};\n",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":15,"column":6,"nodeType":"106","endLine":15,"endColumn":12,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":18,"column":25,"nodeType":"110","messageId":"111","endLine":18,"endColumn":29},{"ruleId":"108","severity":1,"message":"112","line":18,"column":31,"nodeType":"110","messageId":"111","endLine":18,"endColumn":38},{"ruleId":"100","replacedBy":"113"},{"ruleId":"102","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":3,"column":1,"nodeType":"117","endLine":25,"endColumn":3},{"ruleId":"104","severity":1,"message":"118","line":22,"column":6,"nodeType":"106","endLine":22,"endColumn":8,"suggestions":"119"},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'activeChat' and 'setActiveChat'. Either include them or remove the dependency array.","ArrayExpression",["122"],"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.",["120"],["121"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useCallback has a missing dependency: 'handler'. Either include it or remove the dependency array.",["123"],"no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [activeChat, data, setActiveChat]",{"range":"128","text":"129"},"Update the dependencies array to be: [handler]",{"range":"130","text":"131"},[563,569],"[activeChat, data, setActiveChat]",[518,520],"[handler]"]